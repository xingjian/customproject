<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009"
				xmlns:s="library://ns.adobe.com/flex/spark"
				xmlns:mx="library://ns.adobe.com/flex/mx" 
				autoDrawBackground="false"
				click="itemrenderer_clickHandler(event)"
				dataChange="itemrenderer_dataChangeHandler(event)"
				minHeight="30" width="270"
				mouseOut="itemrenderer_mouseOutHandler(event)"
				mouseOver="itemrenderer_mouseOverHandler(event)">
	<fx:Metadata>
		[Event(name="showMessage", type="com.zysupermap.event.AppEvent")]
		[Event(name="showPosition", type="com.zysupermap.event.AppEvent")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import com.supermap.web.core.styles.Style;
			import com.zysupermap.event.AppEvent;
			
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			
			import spark.components.Application;
			
			
			private const QUERY_RESULT_CLICK:String = "queryResultClick";
			private const QUERY_RESULT_MOUSE_OVER:String = "queryResultMouseOver";
			private const QUERY_RESULT_MOUSE_OUT:String = "queryResultMouseOut";
			
			private function itemrenderer_dataChangeHandler(event:FlexEvent):void{
				var queryResult:ResultItem = data as ResultItem;
			}
			
			private function itemrenderer_clickHandler(event:MouseEvent):void
			{
				dispatchEvent(new Event(QUERY_RESULT_CLICK, true)); // bubbles
			}
			
			private function itemrenderer_mouseOverHandler(event:MouseEvent):void
			{
				dispatchEvent(new Event(QUERY_RESULT_MOUSE_OVER, true)); // bubbles
			}
			
			private function itemrenderer_mouseOutHandler(event:MouseEvent):void
			{
				dispatchEvent(new Event(QUERY_RESULT_MOUSE_OUT, true)); // bubbles
			}
			
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="normal"/>
		<s:State name="hovered"/>
	</s:states>
	
	<!-- border/background rectangle -->
	<s:Rect left="0" right="0" top="0" bottom="0"
			radiusX="4"
			radiusY="4">
		<s:stroke>
			<mx:SolidColorStroke alpha="{getStyle('borderAlpha')}"
								 color="{getStyle('borderColor')}"
								 weight="1"/>
		</s:stroke>
		<s:fill>
			<s:SolidColor alpha="0.3"
						  alpha.hovered="0.8"
						  color.hovered="{getStyle('rollOverColor')}"
						  color.normal="{getStyle('contentBackgroundColor')}"/>
		</s:fill>
	</s:Rect>
	
	<s:HGroup width="100%" height="100%"
			  paddingBottom="3"
			  paddingLeft="3"
			  paddingRight="3"
			  paddingTop="3"
			  verticalAlign="middle">
		<s:VGroup width="100%" height="100%" gap="5"
				  verticalAlign="middle">
			<s:Label width="100%"
					 fontWeight="normal"
					 color="#003295"
					 maxDisplayedLines="-1"
					 text="{'名称： '+data.attributes.name}"/>
			<s:HGroup width="100%" verticalAlign="middle">
				<s:Label width="100%"
						 fontWeight="normal"
						 maxDisplayedLines="-1"
						 text="{'类型： '+data.attributes.type}"/>
				<mx:LinkButton label="定位" color="#ff0000" textDecoration="underline" click="{dispatchEvent(new AppEvent('showPosition',true,false,data))}" />
				<mx:LinkButton label="详细信息" visible="{null!=data.attributes.mis_id}" color="#ff0000" textDecoration="underline" click="{dispatchEvent(new AppEvent('showMessage',true,false,data))}" />
			</s:HGroup>
		</s:VGroup>
	</s:HGroup>
</s:ItemRenderer>
